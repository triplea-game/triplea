#!/bin/bash

set -u

export scriptDir=$(dirname "$0")
basePath="$scriptDir/../../${1-.}"

if [ ! -d "$basePath" ]; then
  echo "Error, invalid path: $basePath"
  echo "Check script arguments"
  exit 1
fi

export green="\e[92m"
export blue="\e[34m"
export normal="\e[0m"
export bold="\e[1m"
export boldRed="${bold}\e[91m"

export javaFiles=$(mktemp)
export testFiles=$(mktemp)
trap 'rm $javaFiles $testFiles' EXIT

## Create a cache of java and test files for faster iteration over all files.
find "$basePath" -type f -name "*.java" -path "*/src/main/java/*" > "$javaFiles"
find "$basePath" -type f -name "*Test.java" -path "*/src/test/java/*" > "$testFiles"

status=0


function title() {
  echo -e "${bold}${blue}$1${normal}"
}
export -f title

function example() {
  echo -e "${blue}Ex: $1${normal}"
}
export -f example

function displayResult() {
  local found="$1"
  if [ "$found" -eq 0 ]; then
    echo -e "${green}[OK]${normal}"
  else
    echo -e "${boldRed}[FIX]${normal}"
  fi
  echo ""
}
export -f displayResult

function favorJava9CollectionsApi() {
  title "Verifying preference to use List.of(), Map.of() and Set.of() compared to java.util.Collections.*"
  example "instead of 'Collections.singleton(value)', use 'Set.of(value)', or EG: use 'Map.of(...)', or 'List.of(..)'"
  local found=0

  while read -r file; do
    grep --color=auto --fixed-strings -Hn -f "$script_dir/style.include/disallowed-collection-calls" "$file" && status=1 && found=1
  done <<< "$(cat "$javaFiles")"

  displayResult "$found"
}
export -f favorJava9CollectionsApi

function referToCollectionsByInterfaceType() {
  title "Assign to collection types using their interface"
  example "instead of 'ArrayList<String> list =', use 'List<String> list = '"
  local found=0

  while read -r file; do
    grep --color=auto -EHn -f "$script_dir/style.include/concrete-collection-types" "$file" && status=1 && found=1
  done <<< "$(cat "$javaFiles")"
  
  displayResult "$found"
}
export -f referToCollectionsByInterfaceType

function removeUnusedLogAnnotations() {
  title "Remove unused lombok @Slf4j annotations"
  local found=0

  while read -r file; do
    if grep --fixed-strings -q "@Slf4j" "$file"; then
      if ! grep -Eq "log::|log\." "$file"; then
        echo -e "${bold}$file${normal}"
        found=1
        status=1
      fi
    fi
  done <<< "$(cat "$javaFiles")"

  displayResult "$found"
}
export -f removeUnusedLogAnnotations

function preferSlf4jOverJavaLogging() {
  title "Use @Slf4j instead of @Log"
  local found=0

  while read -r file; do
    if grep --color=auto -EHn "@Log|^import java.util.log" "$file"; then
      found=1
      status=1
    fi
  done <<< "$(cat "$javaFiles")"

  displayResult "$found"
}
export -f preferSlf4jOverJavaLogging

function useEmptyOverSizeEqualsZero() {
  title "Avoid using size() to check for empty or not empty"
  example "size() == 0 -> isEmpty(), size() > 0 -> !isEmpty()"
  local found=0
  while read -r file; do
    grep --color=auto -EHn \
        "size\(\) == 0|size\(\) < 1|size\(\) <= 0|size\(\) > 0|size\(\) != 0|size\(\) >= 1" "$file" \
      && status=1 && found=1
  done <<< "$(cat "$javaFiles")"

  displayResult "$found"
}
export -f useEmptyOverSizeEqualsZero

# Checks for static imports by looking for fully qualified constructs used in test, eg:
#   Mockito.when
# We distinguish from imports and standard usages by looking for a trailing semicolon, eg:
#   import static ..MatcherAssert.assertThat;
# If we do not see that trailing semi-colon, then we have found something that is not statically
# imported.
function useStaticImportsInTest() {
  title "Use static imports in test"
  example "Mockito.when(..) -> when(..)"
  local found=0
  while read -r file; do
    grep --color=auto -EHn \
      "Mockito.when[^;]|Mockito.verify[^;|NoMoreInteractions;]|MatcherAssert.assertThat[^;]|Is\.is[^;]|IsInstanceOf\.instanceOf[^;]" \
      "$file" \
     && status=1 && found=1
  done <<< "$(cat "$testFiles")"
  displayResult "$found"
}
export -f useStaticImportsInTest

function useJavaxNonnullInsteadOfLombokNonNull() {
  title "Use javax.annotation.Nonnull instead of lombok.NonNull"
  local found=0
  while read -r file; do
    grep --color=auto --with-filename --line-number --fixed-strings \
      "lombok.NonNull" \
      "$file" \
     && status=1 && found=1
  done <<< "$(cat "$javaFiles")"

  displayResult "$found"
}
export -f useJavaxNonnullInsteadOfLombokNonNull


removeUnusedLogAnnotations
useStaticImportsInTest
useJavaxNonnullInsteadOfLombokNonNull

## The below flag errors that need to be fixed before they can be enabled
#  favorJava9CollectionsApi
#  referToCollectionsByInterfaceType
#  preferSlf4jOverJavaLogging

exit "$status"
