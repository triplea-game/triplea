plugins {
    id "java"
    id "pmd"
    id "com.github.ben-manes.versions" version "0.52.0"
    id "com.diffplug.spotless" version "7.0.3" apply false
}

apply plugin: "eclipse"

ext {
    schemasDir = file("config/triplea/schemas")
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    apply plugin: "com.diffplug.spotless"
    apply plugin: "java"

    spotless {
        format "allFiles", {
            target "*"
            targetExclude "gradlew.bat"
            endWithNewline()
            leadingTabsToSpaces()
            trimTrailingWhitespace()
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

subprojects {
    apply plugin: "checkstyle"
    apply plugin: "jacoco"
    apply plugin: "java"
    apply plugin: "pmd"

    apply from: rootProject.file("gradle/scripts/release.gradle")
    apply from: rootProject.file("gradle/scripts/version.gradle")

    group = "triplea"

    ext {
        apacheHttpComponentsVersion = "4.5.14"
        assertjCoreVersion = '3.27.3'
        awaitilityVersion = "4.3.0"
        caffeineVersion = "3.2.0"
        checkstyleVersion = "8.45"
        commonsIoVersion = "2.19.0"
        commonsMathVersion = "3.6.1"
        commonsTextVersion = "1.13.1"
        dropwizardWebsocketsVersion = "1.3.14"
        equalsVerifierVersion = "4.0"
        feignVersion = "13.6"
        gsonVersion = "2.13.1"
        guavaVersion = "33.4.8-jre"
        hamcrestOptionalVersion = "2.0.0"
        hamcrestVersion = "2.0.0.0"
        jacksonDataTypeVersion = "2.19.0"
        jakartaMailVersion = "2.0.1"
        javaWebSocketVersion = "1.6.0"
        jaxbImplVersion = "4.0.5"
        jetbrainsAnnotationsVersion = "26.0.2"
        jlayerVersion = "1.0.1.4"
        junitJupiterVersion = "5.12.2"
        junitPlatformLauncherVersion = "1.12.2"
        logbackClassicVersion = "1.5.18"
        mockitoVersion = "5.18.0"
        openFeignVersion = "13.3"
        snakeYamlVersion = "2.9"
        sonatypeGoodiesPrefsVersion = "2.3.9"
        substanceVersion = "4.5.0"
        wireMockJunit5Version = "1.3.1"
        wireMockVersion = "3.0.1"
        xchartVersion = "3.8.8"
        xmlUnitCore = "2.10.1"
        xmlUnitMatchers = "2.10.0"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation ("com.googlecode.soundlibs:jlayer:$jlayerVersion") {
            exclude group: 'junit', module: 'junit'
        }
        compileOnly("org.projectlombok:lombok:1.18.38")
        annotationProcessor("org.projectlombok:lombok:1.18.38")

        testCompileOnly("org.projectlombok:lombok:1.18.38")
        testAnnotationProcessor("org.projectlombok:lombok:1.18.38")

        implementation "ch.qos.logback:logback-classic:$logbackClassicVersion"
        implementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
        implementation "com.google.code.gson:gson:$gsonVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "com.liveperson:dropwizard-websockets:$dropwizardWebsocketsVersion"
        implementation "com.sun.mail:jakarta.mail:$jakartaMailVersion"
        implementation "com.sun.xml.bind:jaxb-impl:$jaxbImplVersion"
        implementation "commons-io:commons-io:$commonsIoVersion"
        implementation "io.github.openfeign:feign-gson:$feignVersion"
        implementation "org.apache.commons:commons-math3:$commonsMathVersion"
        implementation "org.apache.commons:commons-text:$commonsTextVersion"
        implementation "org.apache.httpcomponents:httpmime:$apacheHttpComponentsVersion"
        implementation "org.java-websocket:Java-WebSocket:$javaWebSocketVersion"
        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "org.knowm.xchart:xchart:$xchartVersion"
        implementation "org.pushing-pixels:radiance-substance:$substanceVersion"
        implementation "org.snakeyaml:snakeyaml-engine:$snakeYamlVersion"
        testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        testImplementation "com.github.npathai:hamcrest-optional:$hamcrestOptionalVersion"
        testImplementation "com.github.tomakehurst:wiremock:$wireMockVersion"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:$equalsVerifierVersion"
        testImplementation "org.assertj:assertj-core:$assertjCoreVersion"
        testImplementation "org.awaitility:awaitility:$awaitilityVersion"
        testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testImplementation "org.mockito:mockito-subclass:$mockitoVersion"
        testImplementation "org.sonatype.goodies:goodies-prefs:$sonatypeGoodiesPrefsVersion"
        testImplementation "org.xmlunit:xmlunit-core:$xmlUnitCore"
        testImplementation "org.xmlunit:xmlunit-matchers:$xmlUnitMatchers"
        testImplementation "ru.lanwen.wiremock:wiremock-junit5:$wireMockJunit5Version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += [
            "-Xlint:none,-processing"
        ]
        options.encoding = "UTF-8"
        options.incremental = true
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform() {}
        testLogging {
            exceptionFormat = "full"
            events = ["standardOut", "standardError", "skipped", "failed"]
        }
    }

    // Add a summary of failed test case to the end of execution
    //   https://stackoverflow.com/questions/43917709/how-do-i-show-a-list-of-all-the-test-failures-after-completion-of-a-gradle-task
    // add a collection to track failedTests
    ext.failedTests = []

    // add a testlistener to all tasks of type Test
    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if(result.resultType == TestResult.ResultType.FAILURE){
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if(!failedTests.empty){
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file(".build/checkstyle.xml")
        configProperties = [samedir: configFile.parent]
    }

    checkstyleMain {
        maxWarnings = 0
        source sourceSets.main.output.resourcesDir
    }

    checkstyleTest {
        maxWarnings = 0
        source sourceSets.test.output.resourcesDir
        exclude "**/map-xmls/*.xml"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            xml.destination file("${buildDir}/jacoco.xml")
            html.required = true
        }
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = files(rootProject.file(".build/pmd.xml"))
        ruleSets = []
        incrementalAnalysis = true
        toolVersion = "7.0.0"
    }

    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
        }
    }
}
